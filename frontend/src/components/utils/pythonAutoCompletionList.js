export const pythonCompletions = [
  {
    label: "print",
    kind: 1,
    insertText: "print(${1:value})",
    insertTextRules: 4,
    documentation: "Prints the specified value(s) to the console.",
  },
  {
    label: "def",
    kind: 15,
    insertText: "def ${1:function_name}(${2:params}):\n    ${3:pass}",
    insertTextRules: 4,
    documentation: "Defines a new function.",
  },
  {
    label: "class",
    kind: 15,
    insertText: "class ${1:ClassName}:\n    def __init__(self${2:, params}):\n        ${3:pass}",
    insertTextRules: 4,
    documentation: "Defines a new class.",
  },
  {
    label: "if",
    kind: 15,
    insertText: "if ${1:condition}:\n    ${2:pass}",
    insertTextRules: 4,
    documentation: "Conditional if statement.",
  },
  {
    label: "elif",
    kind: 15,
    insertText: "elif ${1:condition}:\n    ${2:pass}",
    insertTextRules: 4,
    documentation: "Else-if conditional statement.",
  },
  {
    label: "else",
    kind: 15,
    insertText: "else:\n    ${1:pass}",
    insertTextRules: 4,
    documentation: "Else block for conditional statements.",
  },
  {
    label: "for",
    kind: 15,
    insertText: "for ${1:item} in ${2:iterable}:\n    ${3:pass}",
    insertTextRules: 4,
    documentation: "For loop to iterate over an iterable.",
  },
  {
    label: "while",
    kind: 15,
    insertText: "while ${1:condition}:\n    ${2:pass}",
    insertTextRules: 4,
    documentation: "While loop for condition-based iteration.",
  },
  {
    label: "import",
    kind: 15,
    insertText: "import ${1:module}",
    insertTextRules: 4,
    documentation: "Imports a module or package.",
  },
  {
    label: "from",
    kind: 15,
    insertText: "from ${1:module} import ${2:name}",
    insertTextRules: 4,
    documentation: "Imports specific names from a module.",
  },
  {
    label: "try",
    kind: 15,
    insertText: "try:\n    ${1:pass}\nexcept ${2:Exception} as ${3:e}:\n    ${4:pass}",
    insertTextRules: 4,
    documentation: "Try-except block for exception handling.",
  },
  {
    label: "except",
    kind: 15,
    insertText: "except ${1:Exception} as ${2:e}:\n    ${3:pass}",
    insertTextRules: 4,
    documentation: "Except block for handling specific exceptions.",
  },
  {
    label: "finally",
    kind: 15,
    insertText: "finally:\n    ${1:pass}",
    insertTextRules: 4,
    documentation: "Finally block executed after try/except.",
  },
  {
    label: "with",
    kind: 15,
    insertText: "with ${1:expression} as ${2:target}:\n    ${3:pass}",
    insertTextRules: 4,
    documentation: "Context manager for resource management.",
  },
  {
    label: "lambda",
    kind: 15,
    insertText: "lambda ${1:arguments}: ${2:expression}",
    insertTextRules: 4,
    documentation: "Creates an anonymous function.",
  },
  {
    label: "return",
    kind: 15,
    insertText: "return ${1:value}",
    insertTextRules: 4,
    documentation: "Returns a value from a function.",
  },
  {
    label: "yield",
    kind: 15,
    insertText: "yield ${1:value}",
    insertTextRules: 4,
    documentation: "Yields a value from a generator function.",
  },
  {
    label: "len",
    kind: 1,
    insertText: "len(${1:obj})",
    insertTextRules: 4,
    documentation: "Returns the length of an object.",
  },
  {
    label: "range",
    kind: 1,
    insertText: "range(${1:start}, ${2:stop}, ${3:step})",
    insertTextRules: 4,
    documentation: "Generates a sequence of numbers.",
  },
  {
    label: "list",
    kind: 1,
    insertText: "list(${1:iterable})",
    insertTextRules: 4,
    documentation: "Creates a list from an iterable.",
  },
  {
    label: "dict",
    kind: 1,
    insertText: "dict(${1:key}=${2:value})",
    insertTextRules: 4,
    documentation: "Creates a dictionary.",
  },
  {
    label: "set",
    kind: 1,
    insertText: "set(${1:iterable})",
    insertTextRules: 4,
    documentation: "Creates a set from an iterable.",
  },
  {
    label: "tuple",
    kind: 1,
    insertText: "tuple(${1:iterable})",
    insertTextRules: 4,
    documentation: "Creates a tuple from an iterable.",
  },
  {
    label: "open",
    kind: 1,
    insertText: "open(${1:filename}, '${2:r}')",
    insertTextRules: 4,
    documentation: "Opens a file for reading or writing.",
  },
  {
    label: "str",
    kind: 1,
    insertText: "str(${1:object})",
    insertTextRules: 4,
    documentation: "Converts an object to a string.",
  },
  {
    label: "int",
    kind: 1,
    insertText: "int(${1:value})",
    insertTextRules: 4,
    documentation: "Converts a value to an integer.",
  },
  {
    label: "float",
    kind: 1,
    insertText: "float(${1:value})",
    insertTextRules: 4,
    documentation: "Converts a value to a floating-point number.",
  },
  {
    label: "bool",
    kind: 1,
    insertText: "bool(${1:value})",
    insertTextRules: 4,
    documentation: "Converts a value to a boolean.",
  },
  {
    label: "input",
    kind: 1,
    insertText: "input(${1:prompt})",
    insertTextRules: 4,
    documentation: "Reads a line from user input.",
  },
  {
    label: "map",
    kind: 1,
    insertText: "map(${1:function}, ${2:iterable})",
    insertTextRules: 4,
    documentation: "Applies a function to all items in an iterable.",
  },
  {
    label: "filter",
    kind: 1,
    insertText: "filter(${1:function}, ${2:iterable})",
    insertTextRules: 4,
    documentation: "Filters items in an iterable based on a function.",
  },
  {
    label: "sorted",
    kind: 1,
    insertText: "sorted(${1:iterable}, key=${2:None}, reverse=${3:False})",
    insertTextRules: 4,
    documentation: "Returns a sorted list from an iterable.",
  },
  {
    label: "enumerate",
    kind: 1,
    insertText: "enumerate(${1:iterable}, start=${2:0})",
    insertTextRules: 4,
    documentation: "Returns an iterator of tuples with index and value.",
  },
  {
    label: "zip",
    kind: 1,
    insertText: "zip(${1:iterable1}, ${2:iterable2})",
    insertTextRules: 4,
    documentation: "Combines multiple iterables into tuples.",
  },
  {
    label: "assert",
    kind: 15,
    insertText: "assert ${1:condition}, ${2:'Assertion failed'}",
    insertTextRules: 4,
    documentation: "Asserts that a condition is true, else raises an AssertionError.",
  },
  {
    label: "raise",
    kind: 15,
    insertText: "raise ${1:Exception}(${2:'Error message'})",
    insertTextRules: 4,
    documentation: "Raises an exception.",
  },
  {
    label: "logging",
    kind: 15,
    insertText: "import logging\nlogging.basicConfig(level=logging.${1:INFO})\nlogger = logging.getLogger('${2:name}')",
    insertTextRules: 4,
    documentation: "Sets up basic logging configuration.",
  },
  {
    label: "datetime",
    kind: 15,
    insertText: "from datetime import datetime\n${1:variable} = datetime.now()",
    insertTextRules: 4,
    documentation: "Imports datetime and gets the current date and time.",
  },
  {
    label: "os",
    kind: 15,
    insertText: "import os",
    insertTextRules: 4,
    documentation: "Imports the os module for operating system interactions.",
  },
  {
    label: "sys",
    kind: 15,
    insertText: "import sys",
    insertTextRules: 4,
    documentation: "Imports the sys module for system-specific parameters and functions.",
  },
  {
    label: "main",
    kind: 15,
    insertText: "if __name__ == '__main__':\n    ${1:pass}",
    insertTextRules: 4,
    documentation: "Standard idiom for main program entry point.",
  },
];